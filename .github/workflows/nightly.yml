name: Nightly Build

on:
  push:
    branches: [master, main]
    tags-ignore:
      - '*'
  pull_request:
    branches: [master, main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: "22"

jobs:
  ###########################################
  # STAGE 1: BUILD (Code checkout, Lint, Build, Artifact)
  ###########################################
  build:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/')"
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.version.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Generate version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${GITHUB_SHA:0:8}"
          fi
          ARTIFACT_NAME="weebsync-build-${VERSION}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting and type checks
        run: |
          cd server && npx tsc --noEmit
          cd ../client && npx vue-tsc --noEmit || true
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,scss,md}" || true

      - name: Build application
        run: yarn build

      - name: Create build artifact
        run: |
          mkdir -p build-output
          # Copy built application
          cp -r build build-output/
          cp package.json yarn.lock build-output/
          # Add metadata
          echo '{"version":"${{ steps.version.outputs.version }}","commit":"${{ github.sha }}","build_date":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > build-output/build-info.json

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.artifact-name }}
          path: build-output/
          retention-days: 7
          compression-level: 9

  ###########################################
  # STAGE 2: SECURITY (Security scans)
  ###########################################
  security:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/')"
    needs: [build]
    steps:
      - name: Checkout (for scanning configs)
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: build-output/

      - name: Dockerfile security scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009,DL3018

      - name: Repository vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  ###########################################
  # STAGE 3: PUBLISH (Docker + Binaries)
  ###########################################
  publish-docker:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: "github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/')"
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: build-output/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-{{sha}}
            type=raw,value=nightly,enable={{is_default_branch}}

      - name: Create Dockerfile with build
        run: |
          # Create optimized Dockerfile that uses our pre-built artifact
          cat > Dockerfile.ci << 'EOF'
          FROM node:22-alpine
          WORKDIR /app
          # Copy pre-built application from artifact
          COPY build-output/ ./
          # Install only production dependencies
          RUN yarn install --frozen-lockfile --production && yarn cache clean
          EXPOSE 3000
          CMD ["node", "build/index.js"]
          EOF

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: "sarif"
          output: "container-scan.sarif"

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "container-scan.sarif"
