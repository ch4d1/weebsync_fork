# syntax=docker/dockerfile:1

# Development Dockerfile optimized for hot-reload and debugging
ARG NODE_VERSION=22-alpine

# --- Base Development Stage ---
FROM node:${NODE_VERSION} AS dev-base

# Install system dependencies for development and setup Python
RUN apk add --no-cache \
  bash \
  curl \
  dumb-init \
  git \
  py3-pip \
  python3 && \
  rm -f /usr/lib/python*/EXTERNALLY-MANAGED

# Set working directory
WORKDIR /app

# --- Development Dependencies Stage ---
FROM dev-base AS dev-deps

# Copy package files for better layer caching
COPY package.json yarn.lock ./
COPY client/package.json ./client/
COPY server/package.json ./server/

# Install all dependencies (including devDependencies) with cache mount
RUN --mount=type=cache,target=/root/.yarn \
  --mount=type=cache,target=/root/.cache \
  yarn install --frozen-lockfile

# --- Final Development Stage ---
FROM dev-base AS development

# Copy dependencies from dev-deps stage
COPY --from=dev-deps /app/node_modules ./node_modules
COPY --from=dev-deps /app/client/node_modules ./client/node_modules  
COPY --from=dev-deps /app/server/node_modules ./server/node_modules

# Copy source files (will be overridden by volume mounts in docker-compose)
COPY . .

# Create necessary directories
RUN mkdir -p /app/build /app/config /app/plugins

# Development environment variables
ENV NODE_ENV=development
ENV DEBUG=weebsync:*

# Create non-root user for security (optional in dev, but good practice)
RUN addgroup -g 1001 -S nodejs && \
  adduser -S nodejs -u 1001 && \
  chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Default command (will be overridden by docker-compose)
CMD ["sh", "-c", "echo 'Development container ready. Override with docker-compose command.'"]